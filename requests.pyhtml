## THIS FILE IS USED FOR HTTP REQUESTS TO THE BACKEND
## Send request data as a JSON

<%!
    import libgoblin, goblin_auth, json
%><% 
user, session = goblin_auth.get_user(c)

if user:
    # Data comes in as a JSON with requested data
    data = []
    if d:
        data = json.loads(d)

    # Default response (for example, a GET request)
    resp = json.dumps({"response": "This is requests.pyhtml"})

    # ADMIN ACTIONS
    if "admin" in data and "action" in data:
        # Don't let users who aren't admin to do anything
        if user != "hokipoki":  
            return json.dumps({"error": "You do not have access to this function."})
        # Lottery
        if data['action'] == "execute_lottery":
            resp = libgoblin.execute_lottery(data['game_id'])
        elif data['action'] == "open_lottery":
            resp = libgoblin.open_lottery(data['game_id'])

        # User info
        elif data['action'] == "get_tickets" and "user" in data:
            resp = libgoblin.to_json(libgoblin.user_tickets(data['user']))
        
        # Auctions
        elif data['action'] == "exec_all_auctions":
            resp = libgoblin.execute_all_auctions(data['game_id'])

        # All student accounts
        elif data['action'] == "get_all_students":
            students = {}
            for r in libgoblin.get_raw_table('users'):
                students[r.user] = libgoblin.format_htk(libgoblin.get_balance(r.user))
            resp = libgoblin.to_json(libgoblin.get_raw_table('users'))
            

    # USER ACTIONS
    elif "user" in data and "action" in data:
        # User info
        if data['action'] == "user_balance":
            resp = libgoblin.format_htk(libgoblin.get_balance(data['user']))

        # Student ticket info    
        elif data['action'] == "get_tickets" and "user" in data:
            resp = libgoblin.to_json(libgoblin.active_tickets(data['user']))    

        # Buying
        elif data['action'] == "buy" and "game_id" in data:
            resp = libgoblin.buy(user, data['game_id'])

        # Selling
        elif data['action'] == "sell" and "ticket_id" in data:
            resp = libgoblin.sell(user, data['ticket_id'])

        # Lottery
        elif data['action'] == "enter_lottery" and "game_id" in data:
            resp = libgoblin.enter_lottery(user, data['game_id'])
        elif data['action'] == "leave_lottery" and "game_id" in data:
            resp = libgoblin.leave_lottery(user, data['game_id'])

        # Auction
        elif data['action'] == "create_auction" and "ticket_id" in data and "initial_bid" in data and "end_date" in data:
            resp = libgoblin.create_auction(user, data['ticket_id'], data['initial_bid'], data['end_date'])
        elif data['action'] == "cancel_auction" and "ticket_id" in data:
            resp = libgoblin.cancel_auction(data['ticket_id'], user)
        elif data['action'] == "auction_listings" and "game_id" in data:
            resp = libgoblin.get_auctions_by_game(data['game_id'])
        elif data['action'] == "bid" and "ticket_id" in data and "bid_amount" in data:
            resp = libgoblin.bid(data['ticket_id'], user, data['bid_amount'])

## else:
##     resp = "Error: invalid request"
%>${resp}
